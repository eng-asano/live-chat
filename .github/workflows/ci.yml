name: CI

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    tags:
      - 'v*' # "v" で始まるタグに対してデプロイを実行

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        run: yarn install

      - name: Run ESLint
        run: yarn lint

  build:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        run: yarn install

      - name: Build the project
        run: yarn build

      - name: Archive build output
        run: tar -czf build.tar.gz .next public # ビルド済みファイルをアーカイブ

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.tar.gz # アーティファクトとしてビルド済みファイルを保存

  deploy:
    runs-on: ubuntu-latest
    needs: build

    if: startsWith(github.ref, 'refs/tags/v') # "v" で始まるタグに対してのみ実行

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./ # ビルド済みファイルを取得

      - name: Get the release asset URL
        id: get_release_asset
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          ASSET_NAME="build.tar.gz" # リリースアセット名
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME"

          # リリース情報を取得
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $API_URL)
          echo "$response" | jq -r --arg ASSET_NAME "$ASSET_NAME" '.assets[] | select(.name == $ASSET_NAME) | .url' > asset_url.txt
          cat asset_url.txt

      - name: Download release asset
        run: |
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o build.tar.gz $(cat asset_url.txt)

      - name: Copy files via SSH
        uses: appleboy/scp-action@v0.1.4 # SSH で EC2 へファイル転送
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: 'build.tar.gz'
          target: '/home/ec2-user/live-chat/' # EC2 上の適切なディレクトリ
